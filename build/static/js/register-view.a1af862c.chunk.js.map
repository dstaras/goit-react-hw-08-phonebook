{"version":3,"sources":["views/RegisterView/RegisterView.module.css","views/RegisterView/RegisterView.js"],"names":["module","exports","RegisterView","dispatch","useDispatch","isLoading","useSelector","authSelectors","getLoading","useState","name","setName","email","setEmail","password","setPassword","handleChange","e","target","value","onSubmit","preventDefault","trim","toast","error","length","info","authOperations","register","className","s","form","autoComplete","TextField","label","variant","color","type","onChange","textField","Button","fullWidth","size","LoaderComponent"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,KAAO,2BAA2B,UAAY,kC,8KCQjD,SAASC,IACtB,IAAMC,EAAWC,cACXC,EAAYC,YAAYC,IAAcC,YAC5C,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MAEd,OAAQT,GACN,IAAK,OACH,OAAOC,EAAQQ,GACjB,IAAK,QACH,OAAON,EAASM,GAClB,IAAK,WACH,OAAOJ,EAAYI,GACrB,QACE,SAiBN,OACE,uBAAMC,SAda,SAAAH,GAEnB,OADAA,EAAEI,iBACkB,KAAhBX,EAAKY,QAAkC,KAAjBV,EAAMU,QAAqC,KAApBR,EAASQ,OACjDC,IAAMC,MAAM,8BACVV,EAASW,OAAS,EACpBF,IAAMG,KAAK,kDAEpBvB,EAASwB,IAAeC,SAAS,CAAElB,OAAME,QAAOE,cAChDH,EAAQ,IACRE,EAAS,SACTE,EAAY,MAIkBc,UAAWC,IAAEC,KAAMC,aAAa,MAA9D,UACE,cAACC,EAAA,EAAD,CACEC,MAAM,OACNC,QAAQ,WACRC,MAAM,UACNC,KAAK,OACL3B,KAAK,OACLS,MAAOT,EACP4B,SAAUtB,EACVa,UAAWC,IAAES,YAGf,cAACN,EAAA,EAAD,CACEC,MAAM,QACNC,QAAQ,WACRC,MAAM,UACNC,KAAK,QACL3B,KAAK,QACLS,MAAOP,EACP0B,SAAUtB,EACVa,UAAWC,IAAES,YAGf,cAACN,EAAA,EAAD,CACEC,MAAM,WACNC,QAAQ,WACRC,MAAM,UACNC,KAAK,WACL3B,KAAK,WACLS,MAAOL,EACPwB,SAAUtB,EACVa,UAAWC,IAAES,aAGblC,GACA,cAACmC,EAAA,EAAD,CACEC,WAAS,EACTN,QAAQ,YACRC,MAAM,UACNM,KAAK,QACLL,KAAK,SALP,qBAWDhC,GAAa,cAACsC,EAAA,EAAD","file":"static/js/register-view.a1af862c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"RegisterView_form__jLkqR\",\"textField\":\"RegisterView_textField__KY2Kj\"};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { authOperations, authSelectors } from '../../redux/auth';\nimport { toast } from 'react-toastify';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport LoaderComponent from '../../components/LoaderComponent';\nimport s from './RegisterView.module.css';\n\nexport default function RegisterView() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(authSelectors.getLoading);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name.trim() === '' || email.trim() === '' || password.trim() === '') {\n      return toast.error('Please fill in all fields!');\n    } else if (password.length < 7) {\n      return toast.info('Passwords must be at least 7 characters long!');\n    }\n    dispatch(authOperations.register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form} autoComplete=\"off\">\n      <TextField\n        label=\"Name\"\n        variant=\"outlined\"\n        color=\"primary\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        className={s.textField}\n      />\n\n      <TextField\n        label=\"Email\"\n        variant=\"outlined\"\n        color=\"primary\"\n        type=\"email\"\n        name=\"email\"\n        value={email}\n        onChange={handleChange}\n        className={s.textField}\n      />\n\n      <TextField\n        label=\"Password\"\n        variant=\"outlined\"\n        color=\"primary\"\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handleChange}\n        className={s.textField}\n      />\n\n      {!isLoading && (\n        <Button\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n        >\n          Sign up\n        </Button>\n      )}\n\n      {isLoading && <LoaderComponent />}\n    </form>\n  );\n}\n"],"sourceRoot":""}